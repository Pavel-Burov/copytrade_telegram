from telethon import TelegramClient, events
from api_keys import Tokens
from request_gpt import RequestGpt
from get_tinkoff_v3 import Trade
import asyncio

api_id = Tokens.api_tele_id
api_hash = Tokens.api_tele_hash
phone_number = Tokens.tele_number

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
last_message_id = None
last_message_text = None

async def get_channel(client):
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–∏–∞–ª–æ–≥–æ–≤
    dialogs = await client.get_dialogs()
    # –ò—â–µ–º –∫–∞–Ω–∞–ª, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –≤—Ç–æ—Ä–æ–º –º–µ—Å—Ç–µ —Å–≤–µ—Ä—Ö—É –≤ —Å–ø–∏—Å–∫–µ –¥–∏–∞–ª–æ–≥–æ–≤
    for i, dialog in enumerate(dialogs, start=1):
        if dialog.is_channel:
            if i == 2:
                print(dialog.name)
                return dialog.entity

async def main():
    async with TelegramClient(phone_number, api_id, api_hash) as client:
        channel_entity = await get_channel(client)

        @client.on(events.NewMessage(chats=[channel_entity]))
        async def new_message_handler(event):
            global last_message_id, last_message_text
            new_message = event.message
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ
            if new_message.id != last_message_id:
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
                last_message_id = new_message.id
                last_message_text = new_message.text if new_message.text else ""
                print(f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {last_message_text}")
                # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
                client.loop.create_task(track_message_editing(client, new_message))

        async def track_message_editing(client, message):
            global last_message_text
            while True:
                # –ñ–¥–µ–º –æ–¥–Ω—É —Å–µ–∫—É–Ω–¥—É –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                await asyncio.sleep(2)
                # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                updated_message = await client.get_messages(channel_entity, ids=message.id)
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–ø–∏—Å–∫–æ–º —Å–æ–æ–±—â–µ–Ω–∏–π
                if isinstance(updated_message, list):
                    updated_message = updated_message[0]
                # –ï—Å–ª–∏ ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑–º–µ–Ω–∏–ª—Å—è, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
                if updated_message.id != last_message_id:
                    break

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                # if updated_message.text != last_message_text or '#—Å–¥–µ–ª–∫–∞' or 'üíéüíéüíéüíéüíéüíé' in last_message_text:
                if True:
                    # print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Ç–∞—Ä—Ç —Å–∏–º–≤–æ–ª: {updated_message.text}")
                    last_message_text = updated_message.text
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    # if '#—Å–¥–µ–ª–∫–∞' or 'üíéüíéüíéüíéüíéüíé' in last_message_text:
                    if True:
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–¥–µ–ª–∫—É
                        prompt = (last_message_text).replace("\r", " ").replace("\n", " ")
                        response = gpt_request.request(prompt=prompt)
                        # if len(response)<1:
                        #     asyncio.sleep(0.2)
                        #     while len(response)<6:
                        #         response = gpt_request.request(prompt=prompt)
                        print(response)
                        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–æ–≤
                        result = {}
                        lines = response.split('\n')
                        for line in lines:
                            parts = line.strip().split('=')
                            if len(parts) == 2:
                                key = parts[0].strip()
                                value = parts[1].strip()
                                result[key] = value
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–∫–∞–∑—ã
                        Trade.process_orders(result=result, sandbox_mode=False)
                        break


        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç
        await client.start()
        await client.run_until_disconnected()

if __name__ == '__main__':
    gpt_request = RequestGpt()
    asyncio.run(main())


#git push -u origin

#task
# stop loss price error